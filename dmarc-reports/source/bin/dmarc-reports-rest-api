#!/usr/bin/ruby
$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'rubygems'
require 'json'
require 'sinatra'
require 'dmarc/report/view/sql'

use Rack::Logger

# Basic settings
set :port, 8081
set :run, true
set :environment, :production
set :down_file, "/var/service/opsdb_rest_api/down"

configure do
  set :valid_things => [ :devices, :models, :features, :tags, :sites,
    :profiles, :cores, :server_classes, :vms, :vm_models ]
end

helpers do
  def logger
    request.logger
  end
end

before do
  # get a connection to backing store
  @conn = DMARC::Report::View::SQL.new
end

after do
end

# routes to get reports metadata
get '/api/v1/reports' do
  @conn.get_all_reports(100).to_json
end

get '/api/v1/reports/:limit' do |limit|
  @conn.get_all_reports(limit).to_json
end

get '/api/v1/reports/paginate/:page/:count' do |page,count|
  page = URI.unescape(page).to_i
  count = URI.unescape(count).to_i

  @conn.get_all_reports_paginated(page,count).to_json
end

get '/api/v1/reports/:param/:value' do |param,value|
  @conn.get_all_reports_filtered(param,value).to_json
end

# routes to get records within reports
get '/api/v1/record/:param/:value' do |param,value|
  param = URI.unescape(param)
  value = URI.unescape(value)
  @conn.get_all_records_filtered(param,value).to_json
end

# Catch-all for invalid api request
get '/api/?*' do
  status 400
  redirect 'api.html'
end

# Catch-all
get '*' do
  redirect "index.html"
end
